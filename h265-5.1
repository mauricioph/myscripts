#!/bin/bash
entrada="${1}"

# Check if there is an input file and split the file name from the extension.
if [[ -z "${entrada}" ]]
	then echo "Usage $0 video.file"
	echo "This script will convert whatever video file to x265 1080p 5.1 AC3 audio"
	exit 1
fi
arq="$(basename "${entrada}")"
ext="${arq##*.}"
out="$(echo ${entrada} | sed "s/${ext}/mp4/g")"

# Make a copy to preserve the original file
echo "Please wait. Getting ${entrada} digital signature"
input=/tmp/$(echo "${entrada}" | md5sum -t | awk '{print $1}').${ext}
output="/tmp/${input}.h265.mp4"
processor=$(cat /proc/cpuinfo | grep processor | wc -l)
echo "${entrada} = $(echo ${input} | sed "s/\.${ext}//g")"
echo "Copying to ${input}"

cp "${entrada}" ${input}

# Check the type of audio and analize which convertion method to use for the audio tracks
audio=$(mediainfo "${input}" | grep Format | grep DTS | cut -d ":" -f 2 | awk '{print $1}')
channels=$(mediainfo "${input}" | grep channel | cut -d ":" -f 2 | awk '{print $1}')

# Preserve uncompressed DTS sound
function dts(){
echo "Convertendo keeping DTS audio"
ffmpeg -i "${input}" -pix_fmt yuv444p10le -s 1920x1080 -threads ${processor} -c:v libx265 -maxrate 7M -bufsize 14M -preset ultrafast -profile:v:0 main444-10 -level:v:0 4.1 -crf 23 -x265-params subme=0:me_range=4:rc_lookahead=30:me=dia:no_chroma_me:8x8dct=0:partitions=none -g:v:0 72 -keyint_min:v:0 72 -sc_threshold:v:0 0 -c:a copy -async 1 -y "${output}"
}


if [ "${audio}" = "DTS" ]
then dts
exit 1
fi

# Convertion from mono or stereo to 5.1 surround sound
case ${channels} in
	1) ffmpeg -i "${input}" -pix_fmt yuv444p10le -s 1920x1080 -threads ${processor} -c:v libx265 -maxrate 7M -bufsize 14M -preset ultrafast -profile:v:0 main444-10 -level:v:0 4.1 -crf 23 -x265-params subme=0:me_range=4:rc_lookahead=30:me=dia:no_chroma_me:8x8dct=0:partitions=none -g:v:0 72 -keyint_min:v:0 72 -sc_threshold:v:0 0 -c:a ac3 -b:a 192k -filter_complex "[0:a]join=inputs=1:channel_layout=5.1:map=0.0-FL|0.0-FR|0.0-FC|0.0-LFE|0.0-BL|0.0-BR[a]" -map 0:v:0 -map [a] -y "${output}"
	;;
	2) ffmpeg -i "${input}" -pix_fmt yuv444p10le -s 1920x1080 -threads ${processor} -c:v libx265 -maxrate 7M -bufsize 14M -preset ultrafast -profile:v:0 main444-10 -level:v:0 4.1 -crf 23 -x265-params subme=0:me_range=4:rc_lookahead=30:me=dia:no_chroma_me:8x8dct=0:partitions=none -g:v:0 72 -keyint_min:v:0 72 -sc_threshold:v:0 0 -c:a ac3 -b:a 192k  -filter_complex "[0:a]join=inputs=1:channel_layout=5.1:map=0.0-FL|0.0-FR|0.0-FC|0.0-LFE|0.0-BL|0.0-BR[a]" -map 0:v:0 -map [a] -y "${output}"
	;;
	*) ffmpeg -i "${input}" -pix_fmt yuv444p10le -s 1920x1080 -threads ${processor} -c:v libx265 -maxrate 7M -bufsize 14M -preset ultrafast -profile:v:0 main444-10 -level:v:0 4.1 -crf 23 -x265-params subme=0:me_range=4:rc_lookahead=30:me=dia:no_chroma_me:8x8dct=0:partitions=none -g:v:0 72 -keyint_min:v:0 72 -sc_threshold:v:0 0 -c:a ac3 -b:a 192k -ac 6 -map 0:v:0 -map 0:a -y "${output}"
	;;
esac

# If it worked clean the rubbish
function worked(){
	echo "Success !!"
	rm "${input}"
	if [ ${ext} != mp4 ]
 		then mv "${output}" "$(echo ${entrada} | sed "s/\.${ext}/\.mp4/g")"
 		rm "${entrada}"
 		else mv "${output}" "${entrada}"
	fi
}

# If it did not work, create a log with the error and clean the fragments preserving the original file for further investigation
function nwork(){
	rm "${input}"
	rm "${output}"
}

# Check the converted file to determine if the Audio and Video where successfully converted, taking also into consideration the length of the file to avoid errors of synchronization on the final file
echo "Checking convertion"
audioc=$(ffprobe "${output}" 2>&1 | grep Stream | grep Audio | cut -d ":" -f 3 | awk '{print $1}')
if [ ! -z "${audioc}" ]
	then echo "Audio = OK"
else echo "There is no Audio Track, the convertion failed."
	nwork
	echo "There is no Audio Track, the convertion failed." >> "${entrada}.log"
	exit 1
fi
videoc=$(ffprobe "${output}" 2>&1 | grep Stream | grep Video | cut -d ":" -f 3 | awk '{print $1}')
if [ ! -z "${videoc}" ]
	then echo "Video = OK"
else echo "There is no Video Track, the convertion failed."
	nwork
	echo "There is no Video Track, the convertion failed." >> "${entrada}.log"
	exit 1
fi

timec=$(ffprobe "${output}" 2>&1 | grep Duration | cut -d " " -f 4 | cut -d "." -f 1)
timed=$(ffprobe "${entrada}" 2>&1 | grep Duration | cut -d " " -f 4 | cut -d "." -f 1)
if [ "${timed}" == "${timec}" ]
	then echo "Duration = OK"
else echo "The lengh of the video is not the same as the original, the convertion failed."
	nwork
	echo "The lengh of the video is not the same as the original, the convertion failed." >> "${entrada}.log"
	exit 1
fi

worked
